{"version":3,"sources":["daily-forecast.js","img/sky-bg.mp4","App.js","reportWebVitals.js","index.js"],"names":["daily","props","className","date","tempMin","tempMax","src","weatherIcon","alt","weatherDesc","sunrise","sunset","App","useState","latitude","setLatitude","longitude","setLongitude","loadWeather","setLoadWeather","videosrc","Videobg","navigator","geolocation","getCurrentPosition","pos","crd","coords","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","timezone","setTimezone","currTemp","setCurrTemp","currSunrise","setCurrSunrise","currSunset","setCurrSunset","currWeather","setCurrWeather","currIconCode","setCurrIconCode","dailyForecast","setDailyForecast","getForecast","a","fetch","response","json","data","current","temp","weather","description","icon","useEffect","Date","setDate","timer","setInterval","clearInterval","url","loop","muted","playing","toLocaleTimeString","toLocaleDateString","slice","map","dt","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.305626c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst daily = (props) => (\r\n\r\n    <div className=\"daily-wrap\">\r\n            <span className = \"date\"> {props.date} </span>\r\n        <span className=\"temperature\">{props.tempMin} °C - {props.tempMax} °C</span>\r\n        <span className=\"weather-icon\">\r\n        <img src={`http://openweathermap.org/img/wn/${props.weatherIcon}@2x.png`} alt=\"\"/>\r\n        <span className=\"weather-description\">{props.weatherDesc}</span>\r\n        </span>\r\n        <div className=\"sun-details\">\r\n            <span className=\"sunrise\">Sunrise: {props.sunrise}</span>\r\n            <span className=\"sunset\">Sunset: {props.sunset}</span>\r\n        </div>\r\n    </div>\r\n    \r\n\r\n)\r\n\r\nexport default daily;\r\n","export default __webpack_public_path__ + \"static/media/sky-bg.b978391a.mp4\";","import React, { useState, useEffect } from 'react';\nimport Daily from './daily-forecast';\nimport './App.css';\nimport ReactPlayer from 'react-player';\nimport Videobg from './img/sky-bg.mp4';\n\nconst App = () => {\n\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n\n  const [loadWeather, setLoadWeather] = useState(0);\n\n  const videosrc = Videobg;\n\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 3000,\n    maximumAge: 0\n  };\n\n  const success = (pos) => {\n    var crd = pos.coords;\n\n    setLatitude(crd.latitude);\n    setLongitude(crd.longitude);\n\n    setLoadWeather(loadWeather + 1);\n\n  }\n\n  const error = (err) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  if (loadWeather === 0) {\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  }\n\n  const weatherAPI = '5cd595786ce09fcfdbbacd7c93fa206d';\n\n  const [timezone, setTimezone] = useState(\"\");\n\n  const [currTemp, setCurrTemp] = useState(0);\n  const [currSunrise, setCurrSunrise] = useState(0);\n  const [currSunset, setCurrSunset] = useState(0);\n  const [currWeather, setCurrWeather] = useState(\"\");\n  const [currIconCode, setCurrIconCode] = useState(\"\");\n\n  const [dailyForecast, setDailyForecast] = useState([]);\n\n  const getForecast = async () => {\n\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly&appid=${weatherAPI}&units=metric`);\n    const data = await response.json();\n    setTimezone(data.timezone);\n    setCurrTemp(data.current.temp);\n    setCurrSunrise(data.current.sunrise);\n    setCurrSunset(data.current.sunset);\n    setCurrWeather(data.current.weather[0].description);\n    setCurrIconCode(data.current.weather[0].icon);\n\n    // console.log(data);\n\n    setDailyForecast(data.daily);\n  }\n\n  useEffect(() => {\n    if (loadWeather === 1) {\n      getForecast();\n    }\n  }, [loadWeather]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [date, setDate] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => setDate(new Date()), 1000)\n    return () => {\n      clearInterval(timer);\n    }\n  });\n\n\n  const successHTML = () => (\n    <div>\n      <h1 className=\"title\"> {timezone} </h1>\n      <div className=\"current info\">\n        <div className=\"time-date-wrap\">\n          <span className=\"time\"> {date.toLocaleTimeString()} </span>\n          <span className=\"date\"> {date.toLocaleDateString()} </span>\n        </div>\n        <span className=\"temperature\">{currTemp} °C</span>\n        <span className=\"weather-icon\">\n          <img src={`http://openweathermap.org/img/wn/${currIconCode}@2x.png`} alt=\"\" />\n          <span className=\"weather-description\">{currWeather}</span>\n        </span>\n        <div className=\"sun-details\">\n          <span className=\"sunrise\">Sunrise: {new Date(currSunrise * 1000).toLocaleTimeString()}</span>\n          <span className=\"sunset\">Sunset: {new Date(currSunset * 1000).toLocaleTimeString()}</span>\n        </div>\n      </div>\n      <div className=\"daily info\">\n        {dailyForecast.slice(1).map(daily => (\n          <Daily\n            key={daily.dt}\n            date={new Date(daily.dt * 1000).toLocaleDateString()}\n            sunrise={new Date(daily.sunrise * 1000).toLocaleTimeString()}\n            sunset={new Date(daily.sunset * 1000).toLocaleTimeString()}\n            tempMin={daily.temp.min}\n            tempMax={daily.temp.max}\n            weatherDesc={daily.weather[0].description}\n            weatherIcon={daily.weather[0].icon}\n          />\n        ))}\n      </div>\n    </div>\n  );\n\n  const errorHTML = () => (\n    <div className=\"error-wrap\">\n      <div className=\"error-message\">\n        Please allow us to access your location to get the latest weather forecasting in your area.\n      </div>\n    </div>\n  );\n\n\n  return (\n    <div className=\"main\">\n      <ReactPlayer\n        url={videosrc}\n        loop={true}\n        muted={true}\n        playing={true}\n        className='video-bg'\n      />\n      {loadWeather === 1 ? successHTML() : errorHTML()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}